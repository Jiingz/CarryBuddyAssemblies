script = "Moonwalker"
author = "Jiingz"
description = "League8 Original Orbwalker"

function OnPreUpdate() end
function OnUpdate() end
function OnBuffGain(unit, buff) end
function OnRecall(unit) end
function OnTeleport(unit) end
function OnNewPath(waypoint, unit) end

core_ = nil

LastAATick = 0
LastMoveCommand = 0
ExtraWindup = 0
ResetNextAA = false
OnPostTrigger = true

extra_delay = 0
forced_target = nil

draw_enemy_range = false
draw_ally_range = false
draw_player_range = true
draw_target = true

orbwalker_key = 57
lasthit_ley = 45
waveclear_key = 47

local_player_color = Color(202/255,123/255,1,1)
enemy_color = Color(176/255,0,53/255,1)
team_color = Color(202/255,123/255,1,1)

target = nil

function OnLoad(core)
    core_ = core
    
   -- core_:UpdateLib("https://raw.githubusercontent.com/Jiingz/CarryBuddyAssemblies/main/prediction.lua","prediction.lua")
   -- core_:UpdatePlugin("https://raw.githubusercontent.com/Jiingz/CarryBuddyAssemblies/main/Moonwalker.lib","Moonwalker.lib")
end

function OnMissile(missile)
   
end

function LoadCfg(config)
    ExtraWindup = config:GetFloat("extraWindup", 90)
    draw_player_range = config:GetBool("draw_player_range", true)
    draw_ally_range = config:GetBool("draw_ally_range", false)
    draw_enemy_range = config:GetBool("draw_enemy_range", false)
    draw_target = config:GetBool("draw_target", true)
    orbwalker_key = config:GetInt("orbwalker_key", 57)
    lasthit_ley = config:GetInt("lasthit_ley", 45)
    waveclear_key = config:GetInt("waveclear_key", 47)

    local_player_color.r = config:GetFloat("local_x", Color:PURPLE().r)
    local_player_color.g = config:GetFloat("local_y", Color:PURPLE().g)
    local_player_color.b = config:GetFloat("local_z", Color:PURPLE().b)
    local_player_color.a = config:GetFloat("local_w", Color:PURPLE().a)

    enemy_color.r = config:GetFloat("enemy_x", Color:PURPLE().r)
    enemy_color.g = config:GetFloat("enemy_y", Color:PURPLE().g)
    enemy_color.b = config:GetFloat("enemy_z", Color:PURPLE().b)
    enemy_color.a = config:GetFloat("enemy_w", Color:PURPLE().a)

    team_color.r = config:GetFloat("team_x", Color:PURPLE().r)
    team_color.g = config:GetFloat("team_y", Color:PURPLE().g)
    team_color.b = config:GetFloat("team_z", Color:PURPLE().b)
    team_color.a = config:GetFloat("team_w", Color:PURPLE().a)
end


function SaveCfg(config) 
    config:SetFloat("extraWindup", ExtraWindup)
    config:SetBool("draw_player_range", draw_player_range)
    config:SetBool("draw_enemy_range", draw_enemy_range)
    config:SetBool("draw_ally_range", draw_ally_range)
    config:SetBool("draw_target", draw_target)
    config:SetInt("orbwalker_key", orbwalker_key)
    config:SetInt("lasthit_ley", lasthit_ley)
    config:SetInt("waveclear_key", waveclear_key)

    config:SetFloat("local_x", local_player_color.r)
    config:SetFloat("local_y", local_player_color.g)
    config:SetFloat("local_z", local_player_color.b)
    config:SetFloat("local_w", local_player_color.a)

    config:SetFloat("enemy_x", enemy_color.r)
    config:SetFloat("enemy_y", enemy_color.g)
    config:SetFloat("enemy_z", enemy_color.b)
    config:SetFloat("enemy_w", enemy_color.a)

    config:SetFloat("team_x", team_color.r)
    config:SetFloat("team_y", team_color.g)
    config:SetFloat("team_z", team_color.b)
    config:SetFloat("team_w", team_color.a)
end

function DrawSettings(ui)
    orbwalker_key = ui:KeySelect("Choose your Orbwalker Key", orbwalker_key)
    lasthit_ley = ui:KeySelect("Choose your Lasthit Key", lasthit_ley)
    waveclear_key = ui:KeySelect("Choose your Waveclear Key", waveclear_key)
   ExtraWindup = ui:SliderFloat("WindupTime",ExtraWindup, 0, 180)


   ui:Separator()

    if(ui:CollapsingHeader("Visuals")) then
        draw_target = ui:Checkbox("Draw the current Orbwalker target", draw_target)
        draw_player_range = ui:Checkbox("Draw Player's Attackrange", draw_player_range) 
        draw_ally_range = ui:Checkbox("Draw the Attackrange of your allies", draw_ally_range)
        draw_enemy_range = ui:Checkbox("Draw the Attackrange of your enemies", draw_enemy_range)

        if(ui:CollapsingHeader("Colors")) then
         local_player_color = ui:ColorPicker("Player Attackrange Color", local_player_color)
         enemy_color = ui:ColorPicker("Enemy Attackrange Color", enemy_color)
         team_color = ui:ColorPicker("Team Attackrange Color", team_color)
        end  
    end
   
  
end

function OnPreOrbwalker()
end

function OnPostOrbwalker()
end

function OnProcessSpell(unit, spell)
end

function OnDash(unit, dash_pos, dash_speed, dash_start_time) end

function OnBuffLose(hero, buff)
   
end

function OnBuffGain(unit, buff)
    if(unit.net_id == core_:GetPlayer().net_id) then
        
        --vaynetumblebonus
        if(buff.hash == 0xBB89EA44) then ResetNextAA = true end

    end
end

function GetValidAttackSpeed()

    atk_speed = core_:GetPlayer().atk_speed

    if(core_:GetPlayer():HasBuff(0xC098BA92)) then
        lethalTempoStacks = core_:GetPlayer():GetBuffByHash(0xC098BA92).count
        if(lethalTempoStacks < 6 and atk_speed > 2.5) then -- if AS isn't uncapped yet set it to 2.5 
            atk_speed = 2.5
        end
    elseif(atk_speed > 2.5) then
        atk_speed = 2.5
    end

    return atk_speed
end

function GetWindupTime()
    return (1/ GetValidAttackSpeed() * 1000) * core_:GetPlayer().windup_time
end

function GetAttackDelay()
return 1000 / GetValidAttackSpeed()
end

function CanAttack()


   return ResetNextAA or LastAATick + GetAttackDelay() + ExtraWindup < core_:GetTickCount()
end

function CanMove()

    return LastMoveCommand < core_:GetTickCount()
end

function GetRealRange(unit)
   return unit.atk_range+unit.bounding_radius + unit:GetSelectionRadius() / 2
end

function DrawAtkRange(unit, color)
    core_:DrawCircleWorld(unit.pos, unit.atk_range + unit.bounding_radius + unit:GetSelectionRadius() / 2, 190, 2.5, color)
end

function OnDraw(ui) 

    if(draw_target and target ~= nil) then 
      --  new_pos = target.pos:Sub(Vec3(50,50,0))

        draw_target_color =  Color(255,255,255,1)

        if(draw_target) then
            core_:DrawCircleWorld(target.pos, target.bounding_radius + target:GetSelectionRadius() / 2, 190, 1.8, draw_target_color)
            --core_:DrawRectWorld(new_pos, new_pos:Add(Vec3(0,300,0)),new_pos:Add(Vec3(100,300,0)), new_pos:Add(Vec3(100,0,0)), 2 , Color(255,0,0,1))
        end

    end

   -- screen_pos = core_:WorldToScreen(core_:GetPlayer().pos)
    for idx, item in pairs(core_.champs) do

        
        if (item.is_visible and item.is_alive and item.is_targetable) then
            if(draw_ally_range and item:IsEnemyTo(core_:GetPlayer()) == false and item.net_id ~= core_:GetPlayer().net_id and core_:IsWorldPointOnScreen(item.pos)) then DrawAtkRange(item, team_color) end
            if(draw_player_range and item.id == core_:GetPlayer().id) then DrawAtkRange(item, local_player_color) end
            if(draw_enemy_range and item:IsEnemyTo(core_:GetPlayer()) == true and core_:IsWorldPointOnScreen(item.pos)) then DrawAtkRange(item, enemy_color) end
        end
    end

  --  core_:DrawText(screen_pos, "MOONWALKER",Color:LOL())
end	

function OnUpdateOrbwalker()
--print(CanAttack(core_))

  --  print(GetWindupTime(core_)))

  if(core_:WasLeftMousePressed()) then
    clicked_unit = core_:GetHoveredObject()
    
        if(clicked_unit == nil) then forced_target = nil end

      if(clicked_unit ~= nil and clicked_unit:IsEnemyTo(core_:GetPlayer()) and clicked_unit:HasUnitTag(UnitTag:Unit_Champion())) then
        forced_target = clicked_unit
          end

    end

    target = nil

    if(core_:IsKeyDown(orbwalker_key) == false and core_:IsKeyDown(lasthit_ley) == false and core_:IsKeyDown(waveclear_key) == false) then
        core_:SetTargetChampionsOnly(false)
        return
    end


    if(core_:IsKeyDown(lasthit_ley)) then
        core_:SetComboMode(core_.mode_lasthit)

        for idx, minion in ipairs(core_.minions) do
            

            if(minion.pos:Distance(core_:GetPlayer().pos) < core_:GetPlayer().atk_range and minion.is_alive and minion:IsEnemyTo(core_:GetPlayer()) and minion.is_targetable) then
                
                predicted_health = core_:GetHealthPrediction(core_:GetPlayer(), minion, 0, math.floor(core_.time))
           -- print(predicted_health)

            if(predicted_health - core_:CalculatePhysicalDamage(core_:GetPlayer().base_atk + core_:GetPlayer().bonus_atk,true, core_:GetPlayer(), minion) - 10 <= 0) then
                target = minion;
                break
            end
            end

            
        end
    end

    if(core_:IsKeyDown(orbwalker_key)) then 
        core_:SetComboMode(core_.mode_combo) 
        target = core_:GetBestTarget(UnitTag:Unit_Champion(), core_:GetPlayer().atk_range) 
    end

    if(core_:IsKeyDown(waveclear_key)) then 
        core_:SetComboMode(core_.mode_waveclear) 
        waveclear_target = core_:GetBestTarget(UnitTag:Unit_Minion_Lane(), core_:GetPlayer().atk_range) 

        if(waveclear_target == nil) then
            waveclear_target = core_:GetBestTarget(UnitTag:Unit_Monster(), core_:GetPlayer().atk_range) 
        end

        target = waveclear_target

        for idx, minion in ipairs(core_.minions) do
            

            if(minion.pos:Distance(core_:GetPlayer().pos) < core_:GetPlayer().atk_range and minion.is_alive and minion:IsEnemyTo(core_:GetPlayer()) and minion.is_targetable) then
                
                predicted_health = core_:GetHealthPrediction(core_:GetPlayer(), minion, 0, math.floor(core_.time))
           -- print(predicted_health)

            if(predicted_health - core_:CalculatePhysicalDamage(core_:GetPlayer().base_atk + core_:GetPlayer().bonus_atk,true, core_:GetPlayer(), minion) - 10 <= 0) then
                target = minion;
                break
            end
            end

            
        end
    end
   


    --[=====[ 
        for idx, item in pairs(core_.minions) do

            core_:DrawCircleWorld(item.pos, 100, 100, 1.8, Color:PURPLE())

            if(item:IsEnemyTo(core_:GetPlayer()) and item.is_alive and item.is_targetable) then
                if(core_:Distance(item, core_:GetPlayer()) < core_:GetPlayer().atk_range + core_:GetPlayer().bounding_radius + core_:GetPlayer():GetSelectionRadius() / 2) then
                    
                    time = GetAttackDelay(core_)  - 100 + 1000 * math.max(0, core_:Distance(core_:GetPlayer(), item) - core_:GetPlayer().bounding_radius) / core_:GetPlayer():GetBasicAttackMissileSpeed()

                    print(core_:GetHealthPrediction(core_:GetPlayer(), item, 0,math.floor(time)))
                    if(core_:GetHealthPrediction(core_:GetPlayer(), item, 0, math.floor(time)) - core_:GetPlayer().base_atk + core_:GetPlayer().bonus_atk <= 0) then
                        print("LASTHIT")
                       target = item
                    end
        
                end

            end

            
    
        end
    --]=====]
    
    


 


    if(forced_target ~= nil and forced_target.is_alive and forced_target.is_targetable and forced_target.is_visible and core_:Distance(forced_target, core_:GetPlayer()) < core_:GetPlayer().atk_range + core_:GetPlayer().bounding_radius + core_:GetPlayer():GetSelectionRadius() / 2) then
        target = forced_target
    end

    if(target ~= nil and target:HasUnitTag(UnitTag:Unit_Champion_Clone()) == false and CanAttack()) then
       
        core_.on_pre_orbwalker = true
      --  print(core_.active_mode)
        core_:IssueAttack(target)
        LastAATick = core_:GetTickCount()
        LastMoveCommand = core_:GetTickCount() + GetWindupTime()
        ResetNextAA = false
        OnPostTrigger = true
    elseif(target ~= nil and CanMove()) then
        core_.on_post_orbwalker = true
        core_:MoveToCursor()
        LastMoveCommand = core_:GetTickCount() + 40
        
        
    elseif(LastMoveCommand < core_:GetTickCount()) then
        if(OnPostTrigger) then
            core_.on_post_orbwalker = true
            OnPostTrigger = false
        end
        core_:SetComboMode(core_.mode_moving)
        core_:MoveToCursor()
        LastMoveCommand = core_:GetTickCount() + 40
    end
end

function OnUpdate()

end

function OnRecall(unit, start_time, state)
   
end